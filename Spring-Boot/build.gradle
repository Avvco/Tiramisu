plugins {
	id 'org.springframework.boot' version 'latest.release'
	id 'io.spring.dependency-management' version 'latest.release'
	id 'java'
}

group = 'tiramisu'
version = '0.0.1-SNAPSHOT'

bootJar {
  enabled = true
}

jar {
  enabled = true
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'

  // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
  implementation 'org.springframework.boot:spring-boot-starter-actuator:+'

  // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
  implementation 'org.springframework.boot:spring-boot-starter-validation:+'

  // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1'

  // https://mvnrepository.com/artifact/org.projectlombok/lombok
  compileOnly 'org.projectlombok:lombok:+'

  // https://mvnrepository.com/artifact/org.web3j/core
  implementation 'org.web3j:core:+'

  // https://mvnrepository.com/artifact/commons-codec/commons-codec
  implementation 'commons-codec:commons-codec:+'

  // https://mvnrepository.com/artifact/org.postgresql/postgresql
  implementation 'org.postgresql:postgresql:+'

  // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-webflux-ui
  implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:+'

}

tasks.named('test') {
	useJUnitPlatform()
}

task buildAndReload {
  dependsOn build
  mustRunAfter build    // buildAndReload must run after the source files are built into class files using build task
  doLast {
    new File(".", "reload-trigger.txt").text = "${System.currentTimeMillis()}" // update trigger file in root folder for hot reload
  }
}